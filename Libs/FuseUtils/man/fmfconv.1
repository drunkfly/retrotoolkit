.\" -*- nroff -*-
.\"
.\" fmfconv.1: fmfconv man page
.\" Copyright (c) 2010-2018 Gergely Szasz
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License along
.\" with this program; if not, write to the Free Software Foundation, Inc.,
.\" 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
.\"
.\" Author contact information:
.\"
.\" E-mail: szaszg@hu.inter.net
.\"
.\"
.TH fmfconv 1 "1st July, 2018" "Version 1.4.3" "Emulators"
.\"
.\"------------------------------------------------------------------
.\"
.SH NAME
fmfconv \(em Fuse Movie File converter
.\"
.\"------------------------------------------------------------------
.\"
.SH SYNOPSIS
.B fmfconv
.RI [ options ]
.RI [ infile
.RI [ outfile
.RI [ soundfile ]]]
.\"
.\"------------------------------------------------------------------
.\"
.SH DESCRIPTION
fmfconv is a Fuse Movie File converter. It can read .fmf files produced by
Fuse ZX Spectrum emulator and write audio files, video files or sequences of
images in a variety of popular formats. It can also stream data to external
tools through a pipe, so you can get virtually any possible format (see
EXAMPLES).
.PP
fmfconv has built-in support for AIFF, AU and WAV sound formats, PPM and
SCR image formats, AVI and YUV4MPEG2 video formats. Supports PNG and
JPEG/MJPEG formats internally if libpng and libjpeg are available respectively.
.\"
.\"------------------------------------------------------------------
.\"
.SH OPTIONS
.SS
General options:
.PP
.RI \-h
.br
.RI \-\-help
.RS
Give brief usage help, listing available options.
.RE
.PP
.RI \-\-info
.RS
Scan input file(s) and print information.
.RE
.PP
.RI "\-i "filename
.br
.RI "\-\-input "filename
.RS
Input file.
.RE
.PP
.RI "\-o "filename
.br
.RI "\-\-output "filename
.RS
Output file.
.RE
.PP
.RI \-y
.br
.RI \-\-overwrite
.RS
Force overwrite of existing output file(s).
.RE
.PP
.RI "\-g "form
.br
.RI "\-\-progress "form
.RS
Show progress, where `form' is one of `%', `bar', `frame' or `time'. frame
and time are similar to bar and show movie seconds or frame number as well.
.RE
.PP
.RI \-q
.br
.RI \-\-quiet
.RS
Decrease the verbosity level by one.
.RE
.PP
.RI \-v
.br
.RI \-\-verbose
.RS
Increase the verbosity level by one.
.RE
.PP
.RI \-V
.br
.RI \-\-version
.RS
Print the version number and exit.
.RE
.SS
Audio options:
.PP
.RI \-\-aifc
.RS
Force AIFF-C output if sound format is AIFF.
.RE
.PP
.RI \-m
.br
.RI \-\-aiff
.RS
Save sound to Apple Computer audio (aiff/aiff-c) file.
.RE
.PP
.RI \-u
.br
.RI \-\-au
.RS
Save sound to Sun Audio (au) file.
.RE
.PP
.RI \-\-mono
.RS
Convert sound to mono (by default sound is converted to stereo).
.RE
.PP
.RI \-\-raw\-sound
.RS
Do not convert sound to 16-bit signed PCM and STEREO or MONO. This is an
advanced option. If stereo/mono or audio encoding change through `fmf' file,
your sound will be crappy.
.RE
.PP
.RI "\-s "filename
.br
.RI "\-\-sound "filename
.RS
Output sound file.
.RE
.PP
.RI \-\-sound\-only
.RS
Process only the sound from an `fmf' file.
.RE
.PP
.RI "\-E "rate
.br
.RI "\-\-srate "rate
.RS
Resample audio to `rate' sampling rate where `rate' is `cd' for 44100\ Hz
or `dat' for 48000\ Hz or a number (`cd' and `dat' set `stereo' as well).
.RE
.PP
.RI \-w
.br
.RI \-\-wav
.RS
Save sound to Waveform Audio (wav) file.
.RE
.SS
Video/image options:
.PP
.RI \-\-avi
.RS
Save video as AVI format with built-in AVI encoder. If fmfconv supports
jpeg files, encode video as M-JPEG and audio as S16_LE PCM. If output is
not a file (stdout or redirected) then fmfconv encode video as uncompressed
BGR24 DIB frames (see \-\-avi\-mjpeg and \-\-avi\-uncompr).
.RE
.PP
.RI "\-f "timing
.br
.RI "\-\-frate "timing
.RS
Set output frame rate. `timing' is `pal', `ntsc', `movie' or a
number with maximum 3 digit after decimal point, or a #/# (e.g.:
\-f 29.97 or \-f 30000/1001).
.br
For video output formats (AVI/MJPEG/YUV4MPEG2) fmfconv set frame rate
to 25 fps (PAL timing). If you want to keep the original frame rate
use `raw' timing.
.RE
.PP
.RI "\-C "cut
.br
.RI "\-\-out\-cut "cut
.RS
Leave out the comma delimited `cut' ranges e.g.: 100\-200,300,500,1:11\-2:22
cut the frames 100\(en200, 300, 500 and frames from 1 min 11 sec to
2 min 22 sec (in the given timing see: \-f/\-\-frate).
.RE
.PP
.RI \-P
.br
.RI \-\-ppm
.RS
Save video as PPM screenshots.
.RE
.PP
.RI \-S
.br
.RI \-\-scr
.RS
Save video as SCR screenshots.
.RE
.PP
.RI \-Y
.br
.RI \-\-yuv
.RS
Save video as yuv4mpeg2.
.RE
.PP
.RI "\-\-yuv\-format "frm
.RS
Set yuv4mpeg2 file frame format to `frm', where `frm' is one of `444',
`422', `420j', `420m', `420' or `410'.
.RE
.SS
The following options are available when PNG files are supported:
.PP
.RI \-\-greyscale
.RS
Save greyscale images.
.RE
.PP
.RI \-G
.br
.RI \-\-png
.RS
Save video frames as PNG screenshots.
.RE
.PP
.RI "\-\-png\-compress "level
.RS
Set compression level from a range 0\(en9, or `none', `fast', `best'.
.RE
.PP
.RI \-\-progressive
.RS
Save progressive (interlaced) PNG files.
.RE
.SS
The following options are available when JPEG files are supported:
.PP
.RI \-\-avi\-mjpeg
.RS
Force the use of M-JPEG AVI frames (lossy).
.RE
.PP
.RI \-\-avi\-uncompr
.RS
Force the use of uncompressed BGR24 AVI frames. This format does not
produce compression artifacts but the file size is bigger. It is a good
choice if you want to process the video with an external tool.
.RE
.PP
.RI \-\-greyscale
.RS
Save greyscale images or convert video frames.
.RE
.PP
.RI \-J
.br
.RI "\-\-jpeg
.RS
Save video frames as JPEG screenshots.
.RE
.PP
.RI \-\-jpeg\-fast
.RS
Use faster, less accurate integer method for DCT compression.
.RE
.PP
.RI \-\-jpeg\-float
.RS
Use floating-point method for DCT compression.
.RE
.PP
.RI \-\-jpeg\-optimize
.RS
Compute optimal Huffman coding tables for the image.
.RE
.PP
.RI \-Q
.br
.RI "\-\-jpeg\-quality "q
.RS
Set jpeg quality from a range 0\(en100.
.RE
.PP
.RI "\-\-jpeg\-smooth "factor
.RS
Set jpeg smoothing factor from a range 0\(en100.
.RE
.PP
.RI \-M
.br
.RI \-\-mjpeg
.RS
Save video as raw M-JPEG file (abbreviated JPEG stream).
.RE
.PP
.RI \-\-progressive
.RS
Save progressive (interlaced) JPEG files.
.RE
.\"
.\"------------------------------------------------------------------
.\"
.SH EXAMPLES
Some of the following examples use 
.IR ffmpeg (1)
as an external tool for doing the final conversion. In some distributions
.IR avconv (1)
is available, which accepts the same parameters.
.PP
Convert FMF to AVI:
.PP
.RS
.EX
fmfconv input.fmf output.avi
.EE
.RE
.PP
Convert FMF to a mpeg video with quality equivalent to YouTube:
.PP
.RS
.EX
fmfconv input.fmf | ffmpeg \-i \- \-vf scale=480:360 \-r 25
        \-codec:v h264 \-codec:a aac \-f mp4 \-b:a 128k
        \-b:v 600k \-pix_fmt yuv420p \-strict \-2 output.mp4
.EE
.RE
.PP
Convert FMF to compact lossless 720p:
.PP
.RS
.EX
fmfconv input.fmf | ffmpeg \-i \- \-vf palettegen palette.png
fmfconv \-\-raw\-sound input.fmf | ffmpeg \-i \- \-i palette.png
        \-filter_complex
        "scale=960:720:flags=neighbor [x]; [x][1:v] paletteuse"
        \-c:a flac \-c:v zmbv \-compression_level:a 12 output.mkv
.EE
.RE
.PP
Convert FMF to compact lossless 1080p:
.PP
.RS
.EX
fmfconv input.fmf | ffmpeg \-i \- \-vf palettegen palette.png
fmfconv \-\-raw\-sound input.fmf | ffmpeg \-i \- \-i palette.png
        \-filter_complex
        "crop=288:216,scale=1440:1080:flags=neighbor
              [x]; [x][1:v] paletteuse"
        \-c:a flac \-c:v zmbv \-compression_level:a 12 output.mkv
.EE
.RE
.PP
Convert FMF to a DVD video format:
.PP
.RS
.EX
fmfconv input.fmf | ffmpeg \-i \- \-aspect 4:3 \-target pal\-dvd
        output.vob
.EE
.RE
.PP
Convert FMF to SVCD video format:
.PP
.RS
.EX
fmfconv input.fmf | ffmpeg \-i \- \-aspect 4:3 \-target pal\-svcd
        output.mpg
.EE
.RE
.PP
Convert FMF to iPod video format:
.PP
.RS
.EX
fmfconv input.fmf | ffmpeg \-i \- \-vf scale=320:240 \-r 30
        \-codec:v h264 \-codec:a aac \-f ipod \-ar 44100 \-b:a 128k
        \-b:v 256k \-pix_fmt yuv420p \-strict \-2 output.m4v
.EE
.RE
.PP
Convert FMF to animated GIF (25 fps) using ImageMagick:
.PP
.RS
.EX
fmfconv \-f 25 input.fmf tmp.png
convert \-delay 4 \-loop 0 \-layers removeDups \-layers Optimize
        tmp*.png output.gif
.EE
.RE
.PP
Extract audio (mono) from a FMF file:
.PP
.RS
.EX
fmfconv \-\-sound-only \-\-mono input.fmf output.wav
.EE
.RE
.\"
.\"------------------------------------------------------------------
.\"
.SH BUGS
None known.
.\"
.\"------------------------------------------------------------------
.\"
.SH SEE ALSO
.IR avconv "(1),"
.IR ffmpeg "(1),"
.IR fuse "(1),"
.IR fuse\-utils "(1),"
.IR imagemagick "(1)."
.PP
The Fuse Movie File specification, at
.br
.IR "http://sourceforge.net/p/fuse-emulator/wiki/FMF%20File%20Format/" .
.PP
The comp.sys.sinclair Spectrum FAQ, at
.br
.IR "http://www.worldofspectrum.org/faq/index.html" .
.\"
.\"------------------------------------------------------------------
.\"
.SH AUTHOR
Gergely Szasz.
